#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

AudioPlaySdWav           playWav1;
// Use one of these 3 output types: Digital I2S, Digital S/PDIF, or Analog DAC
AudioOutputI2S           audioOutput;
//AudioOutputSPDIF       audioOutput;
//AudioOutputAnalog      audioOutput;
AudioConnection          patchCord1(playWav1, 0, audioOutput, 0);
AudioConnection          patchCord2(playWav1, 1, audioOutput, 1);
AudioControlSGTL5000     sgtl5000_1;

// Use these with the Teensy Audio Shield
#define SDCARD_CS_PIN    10
#define SDCARD_MOSI_PIN  7
#define SDCARD_SCK_PIN   14

// Use these with the Teensy 3.5 & 3.6 SD card
//#define SDCARD_CS_PIN    BUILTIN_SDCARD
//#define SDCARD_MOSI_PIN  11  // not actually used
//#define SDCARD_SCK_PIN   13  // not actually used

// Use these for the SD+Wiz820 or other adaptors
//#define SDCARD_CS_PIN    4
//#define SDCARD_MOSI_PIN  11
//#define SDCARD_SCK_PIN   13

#include <Wire.h>
#include "Adafruit_TCS34725.h"

// Pick analog outputs, for the UNO these three work well
// use ~560  ohm resistor between Red & Blue, ~1K for green (its brighter)
#define redpin 3
#define greenpin 5
#define bluepin 6
// for a common anode LED, connect the common pin to +5V
// for common cathode, connect the common to ground

// set to false if using a common cathode LED
#define commonAnode true

// our RGB -> eye-recognized gamma color
byte gammatable[256];


Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X);

bool luciferIsPlaying = false;
bool snowIsPlaying = false;
bool goldIsPlaying = false;
bool beyonceIsPlaying = false;

bool isLuciferPlaying(){
  return luciferIsPlaying;
}

bool isSnowPlaying(){
  return snowIsPlaying;
}

bool isGoldPlaying(){
  return goldIsPlaying;
}

bool isbeyoncePlaying(){
  return beyonceIsPlaying;
}

bool testBlack(float r, float g, float b){
  if (r < 65 , g < 65, b < 65) {
    return true; 
  } else { 
    return false;
  }
}

bool testGold(float r, float g, float b){
  if (r > 230, g > 230, b < 50) {
    return true; 
  } else { 
    return false;
  }
}

bool testBlue(float r, float g, float b){
  if (r < 60, 60 < g < 100, b > 100) {
    return true; 
  } else { 
    return false;
  }
}

bool testWhite(float r, float g, float b){
  if (r < 30, 100 < g < 150, b > 230) {
    return true; 
  } else { 
    return false;
  }
}



void setup() {
  Serial.begin(9600);

  // Audio connections require memory to work.  For more
  // detailed information, see the MemoryAndCpuUsage example
  AudioMemory(8);

  // Comment these out if not using the audio adaptor board.
  // This may wait forever if the SDA & SCL pins lack
  // pullup resistorss
  sgtl5000_1.enable();
  sgtl5000_1.volume(0.2);

  SPI.setMOSI(SDCARD_MOSI_PIN);
  SPI.setSCK(SDCARD_SCK_PIN);
  if (!(SD.begin(SDCARD_CS_PIN))) {
    // stop here, but print a message repetitively
    while (1) {
      Serial.println("Unable to access the SD card");
      delay(500);
    }
  }

  //COLOR VIEW
  Serial.println("Color View Test!");

  if (tcs.begin()) {
    Serial.println("Found sensor");
  } else {
    Serial.println("No TCS34725 found ... check your connections");
    while (1); // halt!
  }

  // use these three pins to drive an LED
  pinMode(redpin, OUTPUT);
  pinMode(greenpin, OUTPUT);
  pinMode(bluepin, OUTPUT);

  // thanks PhilB for this gamma table!
  // it helps convert RGB colors to what humans see
  for (int i = 0; i < 256; i++) {
    float x = i;
    x /= 255;
    x = pow(x, 2.5);
    x *= 255;

    if (commonAnode) {
      gammatable[i] = 255 - x;
    } else {
      gammatable[i] = x;
    }
    //Serial.println(gammatable[i]);
  }
}

void playFile(const char *filename)
{
  Serial.print("Playing file: ");
  Serial.println(filename);

  // Start playing the file.  This sketch continues to
  // run while the file plays.
  playWav1.play(filename);

  // A brief delay for the library read WAV info
  delay(5);

  // Simply wait for the file to finish playing.
  //while (playWav1.isPlaying()) {
    // uncomment these lines if you audio shield
    // has the optional volume pot soldered
    //float vol = analogRead(15);
    //vol = vol / 1024;
    //sgtl5000_1.volume(vol);
  //}
}


void loop() {
  //  playFile("GOLD.WAV");  // filenames are always uppercase 8.3 format
  //  delay(500);
  //  playFile("IRREPLACEABLE.WAV");
  //  delay(500);
  //  playFile("SNOW.WAV");
  //  delay(500);
  //  playFile("LUCIFER.WAV");
  //  delay(1500);

  uint16_t clear, red, green, blue;

  tcs.setInterrupt(false);      // turn on LED

  delay(60);  // takes 50ms to read

  tcs.getRawData(&red, &green, &blue, &clear);

  tcs.setInterrupt(true);  // turn off LED

  Serial.print("C:\t"); Serial.print(clear);
  Serial.print("\tR:\t"); Serial.print(red);
  Serial.print("\tG:\t"); Serial.print(green);
  Serial.print("\tB:\t"); Serial.print(blue);

  // Figure out some basic hex code for visualization
  uint32_t sum = clear;
  float r, g, b;
  r = red; r /= sum;
  g = green; g /= sum;
  b = blue; b /= sum;
  r *= 256; g *= 256; b *= 256;
  Serial.print("\t");
  Serial.print((int)r, HEX); Serial.print((int)g, HEX); Serial.print((int)b, HEX);
  Serial.println();


  //Serial.print((int)r ); Serial.print(" "); Serial.print((int)g);Serial.print(" ");  Serial.println((int)b );

  tiaTestsColor(r, g, b);
  
  //function
  analogWrite(redpin, gammatable[(int)r]);
  analogWrite(greenpin, gammatable[(int)g]);
  analogWrite(bluepin, gammatable[(int)b]);
}


void testColor(float r, float g, float b) {
  if (r > 230 && g > 230 && b < 50) {
    playFile("GOLD.WAV");
    delay(2000);
  } else if (r < 30 && 100 < g < 150 && b > 230) {
    playFile("SNOW.WAV");
    delay(2000);
  } else if (r < 60 && 60 < g < 100 && b > 100) {
    playFile("IRREPLACEABLE.WAV");
    delay(2000);  
  } else if (r < 65 && g < 65 && b < 65) {
    playFile("LUCIFER.WAV");
    delay(2000);
  }
}

//REPEAT THIS 3 MORE TIMES 
void tiaTestsColor(float r, float g, float b){
  if (testBlack(r, g, b)){
    if (!luciferIsPlaying){
      playFile("LUCIFER.WAV");
      luciferIsPlaying = true; 
      snowIsPlaying = false;
      goldIsPlaying = false;
      beyonceIsPlaying = false;
    }
  } 
  else if (testWhite(r, g, b)){
    if (!snowIsPlaying){
      playFile("SNOW.WAV");
      luciferIsPlaying = false; 
      snowIsPlaying = true;
      goldIsPlaying = false;
      beyonceIsPlaying = false;
    }
   } 
   else if (testGold(r, g, b)){
    if (!goldIsPlaying){
      playFile("GOLD.WAV");
      luciferIsPlaying = false; 
      snowIsPlaying = false;
      goldIsPlaying = true;
      beyonceIsPlaying = false;
    } 
   }
   else if (testBlue(r, g, b)){
    if (!beyonceIsPlaying){
      playFile("IRREPLACEABLE.WAV");
      luciferIsPlaying = false; 
      snowIsPlaying = false;
      goldIsPlaying = false;
      beyonceIsPlaying = true;
    } 
  }
}
